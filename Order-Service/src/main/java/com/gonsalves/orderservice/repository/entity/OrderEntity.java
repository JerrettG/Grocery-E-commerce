package com.gonsalves.orderservice.repository.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.Objects;

@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "Ecommerce-OrderService-Orders")
public class Order {
    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "id")
    private String id;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "user_id-payment_intent_id-index")
    @DynamoDBRangeKey(attributeName = "user_id")
    private String userId;
    @DynamoDBIndexRangeKey(globalSecondaryIndexName = "user_id-payment_intent_id-index")
    @DynamoDBAttribute(attributeName = "payment_intent_id")
    private String paymentIntentId;
    @DynamoDBAttribute(attributeName = "shipping_address")
    private String shippingAddress;
    @DynamoDBAttribute(attributeName = "order_total")
    private double orderTotal;
    @DynamoDBAttribute(attributeName = "order_status")
    private String status;
    @DynamoDBAttribute(attributeName = "order_items")
    private List<OrderItem> orderItems;
    @DynamoDBAutoGeneratedTimestamp
    @DynamoDBTypeConverted(converter = LocalDateTimeToStringTypeConverter.class)
    @DynamoDBAttribute(attributeName = "created_date")
    private String createdDate;


    public void calculateAndSetOrderTotal() {
        double total = 0;
        for (OrderItem orderItem: orderItems) {
            total += orderItem.getQuantity()*orderItem.getUnitPrice();
        }
        orderTotal = total;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Objects.equals(id, order.id) && Objects.equals(userId, order.userId) && Objects.equals(paymentIntentId, order.paymentIntentId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, userId, paymentIntentId);
    }
}